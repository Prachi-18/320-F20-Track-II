{"ast":null,"code":"var _jsxFileName = \"/Users/ChenSong/Documents/GitHub/320-F20-Track-II/frontend/src/pages/chart/chart.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js';\n\nfunction Radar({\n  coverage,\n  summary\n}) {\n  const chartContainer = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null); // state for input\n\n  const chartConfig = onChartChange(summary);\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const newChartInstance = new Chart(chartContainer.current, chartConfig);\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer]);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartContainer,\n    id: \"coverage-plot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  });\n\n  function colorLimit(value) {\n    if (value < 1.5) {\n      return \"rgba(255, 0, 0, 0.2)\";\n    } else if (value < 2.5) {\n      return \"rgba(255, 255, 0, 0.2)\";\n    } else {\n      return \"rgba(0, 128, 0, 0.2)\";\n    }\n  }\n\n  function onChartChange(input) {\n    return {\n      type: 'radar',\n      data: {\n        //labels: coverage.keys,\n        labels: Object.keys(coverage),\n        datasets: [{\n          label: \"Student A\",\n          backgroundColor: colorLimit(input),\n          data: Object.values(coverage)\n        }]\n      },\n      options: {\n        scale: {\n          ticks: {\n            beginAtZero: true,\n            min: 0,\n            display: false\n          }\n        }\n      }\n    };\n  }\n}\n\nexport default Radar;","map":{"version":3,"sources":["/Users/ChenSong/Documents/GitHub/320-F20-Track-II/frontend/src/pages/chart/chart.js"],"names":["React","useEffect","useRef","useState","Chart","Radar","coverage","summary","chartContainer","chartInstance","setChartInstance","chartConfig","onChartChange","current","newChartInstance","colorLimit","value","input","type","data","labels","Object","keys","datasets","label","backgroundColor","values","options","scale","ticks","beginAtZero","min","display"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAGA,SAASC,KAAT,CAAe;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAf,EAAoC;AAChC,QAAMC,cAAc,GAAGN,MAAM,CAAC,IAAD,CAA7B;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,IAAD,CAAlD,CAFgC,CAGhC;;AAEA,QAAMQ,WAAW,GAAGC,aAAa,CAACL,OAAD,CAAjC;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,cAAc,IAAIA,cAAc,CAACK,OAArC,EAA8C;AAC1C,YAAMC,gBAAgB,GAAG,IAAIV,KAAJ,CAAUI,cAAc,CAACK,OAAzB,EAAkCF,WAAlC,CAAzB;AACAD,MAAAA,gBAAgB,CAACI,gBAAD,CAAhB;AACH;AACJ,GALQ,EAKN,CAACN,cAAD,CALM,CAAT;AAOA,sBACI;AACI,IAAA,GAAG,EAAEA,cADT;AAEI,IAAA,EAAE,EAAC,eAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;;AAOA,WAASO,UAAT,CAAoBC,KAApB,EAA2B;AACvB,QAAIA,KAAK,GAAG,GAAZ,EAAiB;AACb,aAAO,sBAAP;AACH,KAFD,MAGK,IAAIA,KAAK,GAAG,GAAZ,EAAiB;AAClB,aAAO,wBAAP;AACH,KAFI,MAGA;AACD,aAAO,sBAAP;AACH;AACJ;;AAED,WAASJ,aAAT,CAAuBK,KAAvB,EAA8B;AAC1B,WAAO;AACHC,MAAAA,IAAI,EAAE,OADH;AAEHC,MAAAA,IAAI,EAAE;AACF;AACAC,QAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAYhB,QAAZ,CAFN;AAGFiB,QAAAA,QAAQ,EAAE,CAAC;AACPC,UAAAA,KAAK,EAAE,WADA;AAEPC,UAAAA,eAAe,EAAEV,UAAU,CAACE,KAAD,CAFpB;AAGPE,UAAAA,IAAI,EAAEE,MAAM,CAACK,MAAP,CAAcpB,QAAd;AAHC,SAAD;AAHR,OAFH;AAWHqB,MAAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE;AACHC,UAAAA,KAAK,EAAE;AACHC,YAAAA,WAAW,EAAE,IADV;AAEHC,YAAAA,GAAG,EAAE,CAFF;AAGHC,YAAAA,OAAO,EAAE;AAHN;AADJ;AADF;AAXN,KAAP;AAqBH;AACJ;;AAED,eAAe3B,KAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js';\n\n\nfunction Radar({coverage, summary}) {\n    const chartContainer = useRef(null);\n    const [chartInstance, setChartInstance] = useState(null);\n    // state for input\n\n    const chartConfig = onChartChange(summary)\n    useEffect(() => {\n        if (chartContainer && chartContainer.current) {\n            const newChartInstance = new Chart(chartContainer.current, chartConfig);\n            setChartInstance(newChartInstance);\n        }\n    }, [chartContainer]);\n\n    return (\n        <canvas\n            ref={chartContainer}\n            id=\"coverage-plot\"\n        />\n    )\n\n    function colorLimit(value) {\n        if (value < 1.5) {\n            return \"rgba(255, 0, 0, 0.2)\"\n        }\n        else if (value < 2.5) {\n            return \"rgba(255, 255, 0, 0.2)\"\n        }\n        else {\n            return \"rgba(0, 128, 0, 0.2)\"\n        }\n    }\n\n    function onChartChange(input) {\n        return {\n            type: 'radar',\n            data: {\n                //labels: coverage.keys,\n                labels: Object.keys(coverage),\n                datasets: [{\n                    label: \"Student A\",\n                    backgroundColor: colorLimit(input),\n                    data: Object.values(coverage)\n                }]\n            },\n            options: {\n                scale: {\n                    ticks: {\n                        beginAtZero: true,\n                        min: 0,\n                        display: false\n                    }\n                }\n            }\n        };\n    }\n}\n\nexport default Radar;\n"]},"metadata":{},"sourceType":"module"}